plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
}

def propsFile = file("build.properties")
def props = new Properties()

if (propsFile.exists()) {
    props.load(new FileInputStream(propsFile))
} else {
    props.setProperty("buildNumber", "1")
}

def buildNumber = Integer.parseInt(props.getProperty("buildNumber"))

version = "1.8.0.${buildNumber}"

group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'net.adriantodt.fabricmc'
		}
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	
	maven { url "https://jitpack.io" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/" }
	maven { url = 'https://maven.minecraftforge.net/' }
	
}

loom {
	splitEnvironmentSourceSets()
	accessWidenerPath = file("src/main/resources/lunasorigins.accesswidener")

	mods {
		"lunasorigins" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyways.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Mods
	modImplementation 'com.github.glitchfiend:TerraBlender-fabric:1.20.1-3.0.1.8'
	modImplementation "com.github.apace100:origins-fabric:${project.origins_version}"
	modImplementation "io.github.apace100:apoli:${project.apoli_version}"
	modImplementation "com.github.Chocohead:Fabric-ASM:2.3"
    include "com.github.Chocohead:Fabric-ASM:2.3"

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
	repositories {
		// Add publishing repositories here
	}
}

gradle.taskGraph.whenReady { graph ->
	if (graph.hasTask(":build")) {
		props.setProperty("buildNumber", (buildNumber + 1).toString())
		props.store(new FileOutputStream(propsFile), null)
	}
}

